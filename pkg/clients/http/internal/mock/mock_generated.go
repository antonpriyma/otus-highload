// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/antonpriyma/otus-highload/pkg/clients/http (interfaces: Request,RequestWithHeaders,RequestWithBody,Response)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockRequest is a mock of Request interface
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// Method mocks base method
func (m *MockRequest) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method
func (mr *MockRequestMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockRequest)(nil).Method))
}

// URL mocks base method
func (m *MockRequest) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL
func (mr *MockRequestMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockRequest)(nil).URL))
}

// MockRequestWithHeaders is a mock of RequestWithHeaders interface
type MockRequestWithHeaders struct {
	ctrl     *gomock.Controller
	recorder *MockRequestWithHeadersMockRecorder
}

// MockRequestWithHeadersMockRecorder is the mock recorder for MockRequestWithHeaders
type MockRequestWithHeadersMockRecorder struct {
	mock *MockRequestWithHeaders
}

// NewMockRequestWithHeaders creates a new mock instance
func NewMockRequestWithHeaders(ctrl *gomock.Controller) *MockRequestWithHeaders {
	mock := &MockRequestWithHeaders{ctrl: ctrl}
	mock.recorder = &MockRequestWithHeadersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestWithHeaders) EXPECT() *MockRequestWithHeadersMockRecorder {
	return m.recorder
}

// Headers mocks base method
func (m *MockRequestWithHeaders) Headers() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Headers indicates an expected call of Headers
func (mr *MockRequestWithHeadersMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockRequestWithHeaders)(nil).Headers))
}

// Method mocks base method
func (m *MockRequestWithHeaders) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method
func (mr *MockRequestWithHeadersMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockRequestWithHeaders)(nil).Method))
}

// URL mocks base method
func (m *MockRequestWithHeaders) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL
func (mr *MockRequestWithHeadersMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockRequestWithHeaders)(nil).URL))
}

// MockRequestWithBody is a mock of RequestWithBody interface
type MockRequestWithBody struct {
	ctrl     *gomock.Controller
	recorder *MockRequestWithBodyMockRecorder
}

// MockRequestWithBodyMockRecorder is the mock recorder for MockRequestWithBody
type MockRequestWithBodyMockRecorder struct {
	mock *MockRequestWithBody
}

// NewMockRequestWithBody creates a new mock instance
func NewMockRequestWithBody(ctrl *gomock.Controller) *MockRequestWithBody {
	mock := &MockRequestWithBody{ctrl: ctrl}
	mock.recorder = &MockRequestWithBodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestWithBody) EXPECT() *MockRequestWithBodyMockRecorder {
	return m.recorder
}

// Body mocks base method
func (m *MockRequestWithBody) Body() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Body indicates an expected call of Body
func (mr *MockRequestWithBodyMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockRequestWithBody)(nil).Body))
}

// Method mocks base method
func (m *MockRequestWithBody) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method
func (mr *MockRequestWithBodyMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockRequestWithBody)(nil).Method))
}

// URL mocks base method
func (m *MockRequestWithBody) URL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL
func (mr *MockRequestWithBodyMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockRequestWithBody)(nil).URL))
}

// MockResponse is a mock of Response interface
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// ReadFrom mocks base method
func (m *MockResponse) ReadFrom(arg0 *http.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFrom indicates an expected call of ReadFrom
func (mr *MockResponseMockRecorder) ReadFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockResponse)(nil).ReadFrom), arg0)
}
